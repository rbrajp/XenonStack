#!/bin/bash

# Updated color variables for better output formatting
HEADER='\033[1;35m'     # Purple for headers
SUBHEADER='\033[1;33m'  # Yellow for subheaders
INFO='\033[0;94m'       # Light blue for information
ERROR='\033[0;91m'      # Light red for errors
NC='\033[0m'            # No Color

# Functions to retrieve system information
get_CPU_info() {
    echo -e "${HEADER}-------- CPU Information --------${NC}"
    lscpu
    echo -e "${HEADER}--------------------------------${NC}"
}

get_memory_info() {
    echo -e "${HEADER}-------- Memory Information --------${NC}"
    free
    echo -e "${HEADER}-----------------------------------${NC}"
}

# Function to manage users
create_new_user() {
    local username="$1"
    if [ -z "$username" ]; then
        echo -e "${ERROR}Error: Username not provided.${NC}"
    else
        echo -e "${HEADER}-------- Creating User '$username' --------${NC}"
        sudo adduser "$username"
        echo -e "${HEADER}-------------------------------------${NC}"
    fi
}

list_regular_users() {
    echo -e "${HEADER}-------- Regular Users --------${NC}"
    cut -d: -f1 /etc/passwd
    echo -e "${HEADER}-------------------------------${NC}"
}

list_sudo_users() {
    echo -e "${HEADER}-------- Users with Sudo Permissions --------${NC}"
    grep -Po '^sudo.+:\K.*$' /etc/group | tr ',' '\n'
    echo -e "${HEADER}--------------------------------------------${NC}"
}

# Function to retrieve file information
get_file_info() {
    local option="$2"
    local file="$3"
    case "$option" in
        "--size" | "-s")
            echo -e "${HEADER}-------- File Size of '$file' --------${NC}"
            stat -c '%s' "$file"
            echo -e "${HEADER}-------------------------------------${NC}"
            ;;
        "--permissions" | "-p")
            echo -e "${HEADER}-------- Permissions of '$file' --------${NC}"
            stat -c '%A' "$file"
            echo -e "${HEADER}---------------------------------------${NC}"
            ;;
        "--owner" | "-o")
            echo -e "${HEADER}-------- Owner of '$file' --------${NC}"
            stat -c '%U' "$file"
            echo -e "${HEADER}----------------------------------${NC}"
            ;;
        "--last-modified" | "-m")
            echo -e "${HEADER}-------- Last Modified Time of '$file' --------${NC}"
            stat -c '%y' "$file"
            echo -e "${HEADER}--------------------------------------------${NC}"
            ;;
        *)
            echo -e "${ERROR}Invalid option. Usage: internsctl file getinfo [options] <file-name>${NC}"
            ;;
    esac
}

# Handling operations based on arguments
case "$1" in
    "cpu" )
        case "$2" in
            "getinfo" )
                get_CPU_info
                ;;
            * )
                echo -e "${ERROR}Invalid usage. Use 'internsctl cpu getinfo'${NC}"
                ;;
        esac
        ;;
    "memory" )
        case "$2" in
            "getinfo" )
                get_memory_info
                ;;
            * )
                echo -e "${ERROR}Invalid usage. Use 'internsctl memory getinfo'${NC}"
                ;;
        esac
        ;;
    "user" )
        case "$2" in
            "create" )
                create_new_user "$3"
                ;;
            "list" )
                if [ "$3" == "--sudo-only" ]; then
                    list_sudo_users
                else
                    list_regular_users
                fi
                ;;
            * )
                echo -e "${ERROR}Invalid usage. Use 'internsctl user create <username>', 'internsctl user list', or 'internsctl user list --sudo-only'${NC}"
                ;;
        esac
        ;;
    "file" )
        case "$2" in
            "getinfo" )
                get_file_info "$3" "$4"
                ;;
            * )
                echo -e "${ERROR}Invalid usage. Use 'internsctl file getinfo [options] <file-name>'${NC}"
                ;;
        esac
        ;;
    * )
        echo -e "${ERROR}Invalid command.${NC}"
        ;;
esac